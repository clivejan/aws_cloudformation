Parameters:
  NameOfService:
    Description: "The name of the service this stack is to be used for"
    Type: String
  KeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access into the server"
    Type: 'AWS::EC2::KeyPair::KeyName'
  VpcId:
    Description: "Enter the Vpc Id"
    Type: 'AWS::EC2::VPC::Id'
  SubnetId:
    Description: "Enter the SubnetId"
    Type: 'AWS::EC2::Subnet::Id'

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0fc61db8544a617ed
    us-east-2:
      AMI: ami-0e01ce4ee18447327
    us-west-1:
      AMI: ami-09a7fe78668f1e2c0
    us-west-2:
      AMI: ami-0ce21b51cb31a48b8
    ca-central-1:
      AMI: ami-0bf54ac1b628cf143

Resources:
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          packages:
            yum:
              httpd: []
              php: []
          files:
            /var/www/html/index.php:
              content: !Sub |
                <?php print gethostname(); ?>
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
    Properties:
      InstanceType: t2.micro
      ImageId:
        !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - AMI
      Tags:
        - Key: Name
          Value: !Ref NameOfService
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref MySecurityGroup
      KeyName: !Ref KeyName
      UserData:
        'Fn::Base64':
          !Sub |
            #!/bin/bash
            # Ensure ASW CFN Bootstrap is the latest
            yum install -y aws-cfn-bootstrap
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
  MySecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

Outputs:
  Website:
    Description: "The public DNS for the EC2 Instance"
    Value: !Sub "http://${Ec2Instance.PublicDnsName}"
